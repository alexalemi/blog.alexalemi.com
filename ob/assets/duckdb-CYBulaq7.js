import{_ as y}from"./leap-day-BtH8lROd.js";import*as c from"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm/+esm";const m={mvp:{mainModule:"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm/dist/duckdb-mvp.wasm",mainWorker:"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm/dist/duckdb-browser-mvp.worker.js"},eh:{mainModule:"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm/dist/duckdb-eh.wasm",mainWorker:"https://cdn.jsdelivr.net/npm/@duckdb/duckdb-wasm/dist/duckdb-browser-eh.worker.js"}},f=c.selectBundle(m),p=new c.ConsoleLogger(c.LogLevel.WARNING);class u{constructor(e){Object.defineProperties(this,{_db:{value:e}})}async queryStream(e,t){const n=await this._db.connect();let a,i;try{if(t?.length>0?a=await(await n.prepare(e)).send(...t):a=await n.send(e),i=await a.next(),i.done)throw new Error("missing first batch")}catch(s){throw await n.close(),s}return{schema:i.value.schema,async*readRows(){try{for(;!i.done;)yield i.value.toArray(),i=await a.next()}finally{await n.close()}}}}async query(e,t){const n=await this._db.connect();let a;try{t?.length>0?a=await(await n.prepare(e)).query(...t):a=await n.query(e)}finally{await n.close()}return a}async queryRow(e,t){const a=(await this.queryStream(e,t)).readRows();try{const{done:i,value:s}=await a.next();return i||!s.length?null:s[0]}finally{await a.return()}}async sql(e,...t){return await this.query(e.join("?"),t)}queryTag(e,...t){return[e.join("?"),t]}escape(e){return`"${e}"`}async describeTables(){return Array.from(await this.query("SHOW TABLES"),({name:e})=>({name:e}))}async describeColumns(e={}){return Array.from(await this.query(`DESCRIBE ${this.escape(e.table)}`),({column_name:t,column_type:n,null:a})=>({name:t,type:I(n),nullable:a!=="NO",databaseType:n}))}static async of(e={},t={}){const n=await E();return t.query?.castTimestampToDate===void 0&&(t={...t,query:{...t.query,castTimestampToDate:!0}}),t.query?.castBigIntToDouble===void 0&&(t={...t,query:{...t.query,castBigIntToDouble:!0}}),await n.open(t),await Promise.all(Object.entries(e).map(([a,i])=>A(n,a,i))),new u(n)}static sql(){return this.of.apply(this,arguments).then(e=>e.sql.bind(e))}}Object.defineProperty(u.prototype,"dialect",{value:"duckdb"});async function A(r,e,t){if(t=await t,k(t))return w(r,e,t);if(l(t))return o(r,e,t);if(Array.isArray(t))return d(r,e,t);if(q(t))return h(r,e,t);if(typeof t=="string")return b(r,e,t);if(t&&typeof t=="object"){if("data"in t){const{data:n,...a}=t;return l(n)?o(r,e,n,a):d(r,e,n,a)}if("file"in t){const{file:n,...a}=t;return w(r,e,n,a)}}throw new Error(`invalid source: ${t}`)}async function b(r,e,t){const n=await r.connect();try{await n.query(`CREATE VIEW '${e}' AS FROM '${t}'`)}finally{await n.close()}}async function w(r,e,t,n){const a=await t.url();if(a.startsWith("blob:")){const s=await t.arrayBuffer();await r.registerFileBuffer(t.name,new Uint8Array(s))}else await r.registerFileURL(t.name,new URL(a,location).href,4);const i=await r.connect();try{switch(t.mimeType){case"text/csv":case"text/tab-separated-values":return await i.insertCSVFromPath(t.name,{name:e,schema:"main",...n}).catch(async s=>{if(s.toString().includes("Could not convert"))return await T(i,t,e);throw s});case"application/json":return await i.insertJSONFromPath(t.name,{name:e,schema:"main",...n});default:if(/\.arrow$/i.test(t.name)){const s=new Uint8Array(await t.arrayBuffer());return await i.insertArrowFromIPCStream(s,{name:e,schema:"main",...n})}if(/\.parquet$/i.test(t.name)){const s=t.size<5e7?"TABLE":"VIEW";return await i.query(`CREATE ${s} '${e}' AS SELECT * FROM parquet_scan('${t.name}')`)}if(/\.(db|ddb|duckdb)$/i.test(t.name))return await i.query(`ATTACH '${t.name}' AS ${e} (READ_ONLY)`);throw new Error(`unknown file type: ${t.mimeType}`)}}finally{await i.close()}}async function T(r,e,t){return await(await r.prepare(`CREATE TABLE '${t}' AS SELECT * FROM read_csv_auto(?, ALL_VARCHAR=TRUE)`)).send(e.name)}async function o(r,e,t,n){const a=await r.connect();try{await a.insertArrowTable(t,{name:e,schema:"main",...n})}finally{await a.close()}}async function h(r,e,t){const a=(await y(()=>import("https://cdn.jsdelivr.net/npm/apache-arrow/+esm"),[],import.meta.url)).tableFromIPC(t.toArrowBuffer());return await o(r,e,a)}async function d(r,e,t,n){const i=(await y(()=>import("https://cdn.jsdelivr.net/npm/apache-arrow/+esm"),[],import.meta.url)).tableFromJSON(t);return await o(r,e,i,n)}async function E(){const{mainWorker:r,mainModule:e}=await f,t=await c.createWorker(r),n=new c.AsyncDuckDB(p,t);return await n.instantiate(e),n}function I(r){switch(r){case"BIGINT":case"HUGEINT":case"UBIGINT":return"bigint";case"DOUBLE":case"REAL":case"FLOAT":return"number";case"INTEGER":case"SMALLINT":case"TINYINT":case"USMALLINT":case"UINTEGER":case"UTINYINT":return"integer";case"BOOLEAN":return"boolean";case"DATE":case"TIMESTAMP":case"TIMESTAMP WITH TIME ZONE":return"date";case"VARCHAR":case"UUID":return"string";default:return/^DECIMAL\(/.test(r)?"integer":"other"}}function k(r){return r&&typeof r.name=="string"&&typeof r.url=="function"&&typeof r.arrayBuffer=="function"}function q(r){return r&&typeof r.toArrowBuffer=="function"}function l(r){return r&&typeof r.getChild=="function"&&typeof r.toArray=="function"&&r.schema&&Array.isArray(r.schema.fields)}export{u as DuckDBClient};
